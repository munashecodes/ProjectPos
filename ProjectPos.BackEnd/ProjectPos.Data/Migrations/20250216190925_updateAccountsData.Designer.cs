// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectPos.Data.DbContexts;

#nullable disable

namespace ProjectPos.Data.Migrations
{
    [DbContext(typeof(ProjectPosDbContext))]
    [Migration("20250216190925_updateAccountsData")]
    partial class updateAccountsData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.AccessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComputerIpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("ComputerName")
                        .HasColumnType("longtext");

                    b.Property<string>("ComputerUserName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsLoggedIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LogInTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LogOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("System")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessLogs");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountCategoryId = 1,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 1001,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Electricity, water, and internet expenses",
                            IsDeleted = false,
                            Name = "Utilities"
                        },
                        new
                        {
                            Id = 2,
                            AccountCategoryId = 1,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 1002,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Expenses related to repairing or maintaining assets",
                            IsDeleted = false,
                            Name = "Repairs and Maintenance"
                        },
                        new
                        {
                            Id = 3,
                            AccountCategoryId = 1,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 1003,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Expenses for cleaning services provided to the shop",
                            IsDeleted = false,
                            Name = "Cleaning Services"
                        },
                        new
                        {
                            Id = 4,
                            AccountCategoryId = 1,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 1004,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Payments made for security personnel or services",
                            IsDeleted = false,
                            Name = "Security Services"
                        },
                        new
                        {
                            Id = 5,
                            AccountCategoryId = 1,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 1005,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fees paid to consultants, lawyers, or accountants",
                            IsDeleted = false,
                            Name = "Professional Fees"
                        },
                        new
                        {
                            Id = 6,
                            AccountCategoryId = 1,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 1006,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Expenses for promotions and advertisements",
                            IsDeleted = false,
                            Name = "Advertising and Marketing"
                        },
                        new
                        {
                            Id = 7,
                            AccountCategoryId = 2,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 2007,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Renovations and upgrades to buildings",
                            IsDeleted = false,
                            Name = "Building Improvements"
                        },
                        new
                        {
                            Id = 8,
                            AccountCategoryId = 2,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 2008,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Purchases of equipment used in operations",
                            IsDeleted = false,
                            Name = "Equipment Purchases"
                        },
                        new
                        {
                            Id = 9,
                            AccountCategoryId = 2,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 2009,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Purchases of furniture or fixtures for the shop",
                            IsDeleted = false,
                            Name = "Furniture and Fixtures"
                        },
                        new
                        {
                            Id = 10,
                            AccountCategoryId = 2,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 2010,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Expenses related to significant repairs or long-term maintenance",
                            IsDeleted = false,
                            Name = "Long-term Maintenance"
                        },
                        new
                        {
                            Id = 11,
                            AccountCategoryId = 3,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 3011,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Costs related to transporting inventory",
                            IsDeleted = false,
                            Name = "Transportation Costs"
                        },
                        new
                        {
                            Id = 12,
                            AccountCategoryId = 3,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 3012,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Costs incurred for packaging materials",
                            IsDeleted = false,
                            Name = "Packaging Costs"
                        },
                        new
                        {
                            Id = 13,
                            AccountCategoryId = 3,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 3013,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Costs related to storing inventory",
                            IsDeleted = false,
                            Name = "Storage Costs"
                        },
                        new
                        {
                            Id = 14,
                            AccountCategoryId = 3,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 3014,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cost of raw materials used for goods",
                            IsDeleted = false,
                            Name = "Raw Materials"
                        },
                        new
                        {
                            Id = 15,
                            AccountCategoryId = 3,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 3015,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Wages paid to employees directly involved in production",
                            IsDeleted = false,
                            Name = "Direct Labor"
                        },
                        new
                        {
                            Id = 16,
                            AccountCategoryId = 6,
                            AccountType = 1,
                            Balance = 0.00m,
                            Code = 6016,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Physical cash available in registers or safes",
                            IsDeleted = false,
                            Name = "Cash in Hand"
                        },
                        new
                        {
                            Id = 17,
                            AccountCategoryId = 6,
                            AccountType = 1,
                            Balance = 0.00m,
                            Code = 6017,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Operational bank account for business transactions",
                            IsDeleted = false,
                            Name = "Bank Account"
                        },
                        new
                        {
                            Id = 24,
                            AccountCategoryId = 6,
                            AccountType = 1,
                            Balance = 0.00m,
                            Code = 6024,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Operational EcoCash account for business transactions",
                            IsDeleted = false,
                            Name = "EcoCash Account"
                        },
                        new
                        {
                            Id = 18,
                            AccountCategoryId = 7,
                            AccountType = 1,
                            Balance = 0.00m,
                            Code = 7018,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amounts owed by customers",
                            IsDeleted = false,
                            Name = "Customer Debts"
                        },
                        new
                        {
                            Id = 26,
                            AccountCategoryId = 7,
                            AccountType = 1,
                            Balance = 0.00m,
                            Code = 7026,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amounts owed by customers",
                            IsDeleted = false,
                            Name = "VAT Receivable"
                        },
                        new
                        {
                            Id = 19,
                            AccountCategoryId = 9,
                            AccountType = 2,
                            Balance = 0.00m,
                            Code = 9019,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amounts owed to suppliers for goods or services",
                            IsDeleted = false,
                            Name = "Supplier Debts"
                        },
                        new
                        {
                            Id = 25,
                            AccountCategoryId = 9,
                            AccountType = 2,
                            Balance = 0.00m,
                            Code = 9025,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amounts owed to suppliers for goods or services",
                            IsDeleted = false,
                            Name = "VAT Payable"
                        },
                        new
                        {
                            Id = 20,
                            AccountCategoryId = 10,
                            AccountType = 2,
                            Balance = 0.00m,
                            Code = 1020,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Short-term bank loans acquired for operations",
                            IsDeleted = false,
                            Name = "Bank Loan"
                        },
                        new
                        {
                            Id = 21,
                            AccountCategoryId = 11,
                            AccountType = 3,
                            Balance = 0.00m,
                            Code = 1121,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Capital contributed by the owner",
                            IsDeleted = false,
                            Name = "Owner's Equity"
                        },
                        new
                        {
                            Id = 22,
                            AccountCategoryId = 12,
                            AccountType = 3,
                            Balance = 0.00m,
                            Code = 1122,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Profits retained in the business for future use",
                            IsDeleted = false,
                            Name = "Retained Earnings"
                        },
                        new
                        {
                            Id = 23,
                            AccountCategoryId = 13,
                            AccountType = 6,
                            Balance = 0.00m,
                            Code = 1223,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Revenue from selling goods",
                            IsDeleted = false,
                            Name = "Product Sales"
                        },
                        new
                        {
                            Id = 27,
                            AccountCategoryId = 8,
                            AccountType = 1,
                            Balance = 0.00m,
                            Code = 1227,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Goods For sale",
                            IsDeleted = false,
                            Name = "Inventory"
                        },
                        new
                        {
                            Id = 28,
                            AccountCategoryId = 3,
                            AccountType = 5,
                            Balance = 0.00m,
                            Code = 1228,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cost Of Goods Sold",
                            IsDeleted = false,
                            Name = "Cost Of Goods Sold"
                        });
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.AccountCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.ToTable("AccountCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 5,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Used for recurring or day-to-day expenses",
                            IsDeleted = false,
                            Name = "Operating Expenses"
                        },
                        new
                        {
                            Id = 2,
                            AccountType = 5,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Used for payments that result in acquiring or improving long-term assets",
                            IsDeleted = false,
                            Name = "Capital Expenditures"
                        },
                        new
                        {
                            Id = 3,
                            AccountType = 5,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Used for services directly tied to inventory procurement or preparation",
                            IsDeleted = false,
                            Name = "Cost of Goods Sold"
                        },
                        new
                        {
                            Id = 4,
                            AccountType = 5,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "For payments that don’t fit into the above categories",
                            IsDeleted = false,
                            Name = "Other Expense Accounts"
                        },
                        new
                        {
                            Id = 6,
                            AccountType = 1,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "money that is readily available for use",
                            IsDeleted = false,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 7,
                            AccountType = 1,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "money owed to the company",
                            IsDeleted = false,
                            Name = "Accounts Receivable"
                        },
                        new
                        {
                            Id = 8,
                            AccountType = 1,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "goods for sale",
                            IsDeleted = false,
                            Name = "Inventory"
                        },
                        new
                        {
                            Id = 9,
                            AccountType = 2,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "money a business owes to its suppliers or creditors",
                            IsDeleted = false,
                            Name = "Accounts Payable"
                        },
                        new
                        {
                            Id = 10,
                            AccountType = 2,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loans aquired by the company",
                            IsDeleted = false,
                            Name = "Short-term Loans"
                        },
                        new
                        {
                            Id = 11,
                            AccountType = 3,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "capital invested into the company",
                            IsDeleted = false,
                            Name = "Owner's Capital"
                        },
                        new
                        {
                            Id = 12,
                            AccountType = 3,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Retained Earnings",
                            IsDeleted = false,
                            Name = "Retained Earnings"
                        },
                        new
                        {
                            Id = 13,
                            AccountType = 6,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "amount of money a business earns from selling goods or services",
                            IsDeleted = false,
                            Name = "Sales Revenue"
                        });
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.CashUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("USDAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CashUps");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasCreditFacility")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<int>("RegNumber")
                        .HasColumnType("int");

                    b.Property<int>("VatNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JobPosition")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone1")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone2")
                        .HasColumnType("longtext");

                    b.Property<int?>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.ToTable("ContactPersons");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.DayEndSalesSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageTransactionValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("CancelledTransactions")
                        .HasColumnType("int");

                    b.Property<decimal>("CardSales")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CashSales")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CashSalesReported")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditSales")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("MobilePayments")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalDiscounts")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TotalReturns")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TotalTransactions")
                        .HasColumnType("int");

                    b.Property<decimal>("VoidedAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("VoidedTransactions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("DayEndSalesSummaries");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Cell")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NatId")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.EmployeeDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DeductionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDeductions");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.EmployeeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bank")
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.Property<int>("SalaryType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseCurrency")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseToRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEffected")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Payee")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptAttachmentPath")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.FinancialAccountSnapShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ClosingBalance")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SnapShotDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("FinancialAccountSnapShots");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.GoodsReceivedVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AmountDue")
                        .HasColumnType("double(12, 2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<double?>("PaidAmount")
                        .HasColumnType("double(12, 2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Transpoter")
                        .HasColumnType("longtext");

                    b.Property<double?>("UsdPaidAmount")
                        .HasColumnType("double(12, 2)");

                    b.Property<double?>("Value")
                        .HasColumnType("double(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("OrderNumber");

                    b.HasIndex("SupplierId");

                    b.ToTable("GoodsReceivedVouchers");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.GoodsReceivedVoucherLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsIssued")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("IssuedQuantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<double?>("OrderPrice")
                        .HasColumnType("double(12, 2)");

                    b.Property<decimal?>("OrderedQuantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<double?>("Price")
                        .HasColumnType("double(12, 2)");

                    b.Property<int?>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("QtyOnHand")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("ReceivedQuantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("Unit")
                        .HasColumnType("int");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("double(12, 2)");

                    b.Property<int?>("VoucherNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductInventoryId");

                    b.HasIndex("VoucherNumber");

                    b.ToTable("GoodsReceivedVoucherLines");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.InventorySnapShotLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDay")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("InventorySnapShotLogs");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.JournalEntryLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("JournalEntryId")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("JournalEntryLines");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.OvertimeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("OvertimeRecords");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PayRollCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("PayRollStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TotalAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalBasic")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalGrossSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalNetSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalOtherDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalPensionDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PayRollCycles");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PaySlip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Allowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("GrossSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("HousingAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal?>("NetSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OtherAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OtherDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OvertimeHours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OvertimePay")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PayRollCycleId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<decimal?>("PensionDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TillShortageDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalEarning")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalNetSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TransportAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("WorkedDays")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PayRollCycleId");

                    b.ToTable("PaySlips");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("ChangeAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MethodOfPay")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("PaidAmountAfterChange")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("ProofOfPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("USDPaidAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("USDPaidAmountAfterChange")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("VAT")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Flag")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<decimal?>("IdealQuantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsTaxable")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("IsWeighted")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MarkUp")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PLUCode")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("QuantityOnHand")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("QuantityOnShelf")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("StockCount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductInventories");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProductInventorySnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Inventory")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SnapShotType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ProductInventorySnapshots");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MarkUp")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("ProductInventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ProductInventoryId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProofOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bank")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BankingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Reference")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("UsableAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("ProofOfPayments");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasColumnType("longtext");

                    b.Property<double>("TotalValue")
                        .HasColumnType("double(12, 2)");

                    b.Property<int?>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PurchaceInvoices");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceInvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double(12, 2)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaceInvoiceLines");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ETA")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("InvoiceValue")
                        .HasColumnType("double(12, 2)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaceOrders");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("double(12, 2)");

                    b.Property<int?>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("Unit")
                        .HasColumnType("int");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("double(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber");

                    b.HasIndex("ProductInventoryId");

                    b.ToTable("PurchaceOrderLines");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceOrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ChangeAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("GoodsReceivedVoucherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MethodOfPay")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("PaidAmountAfterChange")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("USDPaidAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("USDPaidAmountAfterChange")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("GoodsReceivedVoucherId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("PurchaceOrderPayments");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SalaryStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AidsLevyDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("HoursWorked")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("HousingAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("MedicalBenefit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal>("OtherAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OtherBenefit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OtherDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OvertimeHours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OvertimeRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("OvertimeTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PensionBenefit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PensionDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxDeduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxableIncome")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TransportAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SalaryStructures");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("PriceIncludingVat")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("SaleType")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SalesOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPostedToJournal")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("Unit")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber");

                    b.HasIndex("ProductId");

                    b.ToTable("SalesOrderItems");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorisedById")
                        .HasColumnType("int");

                    b.Property<int?>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsAuthorised")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsssuedTo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatchNumber");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("ProductInventoryId");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.StockMovementLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorisedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsAuthorised")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsssuedTo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("StockMovementLogs");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.StockTakeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("StockTakeLogs");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtToken")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SupervisorCodeHash")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.AccessLog", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "User")
                        .WithMany("AccessLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Account", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.AccountCategory", "AccountCategory")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountCategoryId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountCategory");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.AccountCategory", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Attendance", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.CashUp", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", null)
                        .WithMany("CashUps")
                        .HasForeignKey("UserId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Company", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("ProjectPos.Data.EntityModels.Company", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ContactPerson", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Address", "Address")
                        .WithOne("ContactPerson")
                        .HasForeignKey("ProjectPos.Data.EntityModels.ContactPerson", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPos.Data.EntityModels.Company", "Company")
                        .WithMany("ContactPersons")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.DayEndSalesSummary", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Employee", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Address", "Address")
                        .WithOne("Employee")
                        .HasForeignKey("ProjectPos.Data.EntityModels.Employee", "AddressId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.EmployeeDeduction", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Employee", "Employee")
                        .WithMany("Deductions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.EmployeeDetails", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId");

                    b.HasOne("ProjectPos.Data.EntityModels.Employee", "Employee")
                        .WithOne("EmployeeDetails")
                        .HasForeignKey("ProjectPos.Data.EntityModels.EmployeeDetails", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ExchangeRate", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Expense", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Account", "Account")
                        .WithMany("Expenses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPos.Data.EntityModels.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("ProjectPos.Data.EntityModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.FinancialAccountSnapShot", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Account", "FinancialAccount")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.GoodsReceivedVoucher", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.PurchaceOrder", "PurchaceOrder")
                        .WithMany("GoodsReceivedVouchers")
                        .HasForeignKey("OrderNumber");

                    b.HasOne("ProjectPos.Data.EntityModels.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");

                    b.Navigation("PurchaceOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.GoodsReceivedVoucherLine", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.ProductInventory", "Product")
                        .WithMany("ReceivedItems")
                        .HasForeignKey("ProductInventoryId");

                    b.HasOne("ProjectPos.Data.EntityModels.GoodsReceivedVoucher", "GoodsReceivedVoucher")
                        .WithMany("ReceivedItems")
                        .HasForeignKey("VoucherNumber");

                    b.Navigation("GoodsReceivedVoucher");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.InventorySnapShotLog", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.JournalEntry", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.JournalEntryLine", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Account", "Account")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("AccountId");

                    b.HasOne("ProjectPos.Data.EntityModels.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("JournalEntryId");

                    b.Navigation("Account");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.OvertimeRecord", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("ProjectPos.Data.EntityModels.Employee", "Employee")
                        .WithMany("OvertimeRecords")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PayRollCycle", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PaySlip", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId");

                    b.HasOne("ProjectPos.Data.EntityModels.Employee", "Employee")
                        .WithMany("PaySlips")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ProjectPos.Data.EntityModels.PayRollCycle", "PayRollCycle")
                        .WithMany("PaySlips")
                        .HasForeignKey("PayRollCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("LastModifierUser");

                    b.Navigation("PayRollCycle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Payment", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.SalesOrder", null)
                        .WithMany("Payments")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProductInventory", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProductInventorySnapshot", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProductPrice", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.ProductInventory", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductInventoryId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProofOfPayment", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.Company", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceInvoice", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceInvoiceLine", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.PurchaceInvoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPos.Data.EntityModels.ProductInventory", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceOrder", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceOrderLine", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.PurchaceOrder", "PurchaceOrder")
                        .WithMany("PurchaceOrderItems")
                        .HasForeignKey("OrderNumber");

                    b.HasOne("ProjectPos.Data.EntityModels.ProductInventory", "Product")
                        .WithMany("OrderedItems")
                        .HasForeignKey("ProductInventoryId");

                    b.Navigation("Product");

                    b.Navigation("PurchaceOrder");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceOrderPayment", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.GoodsReceivedVoucher", null)
                        .WithMany("PurchaceOrderPayments")
                        .HasForeignKey("GoodsReceivedVoucherId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SalaryStructure", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId");

                    b.HasOne("ProjectPos.Data.EntityModels.Employee", "Employee")
                        .WithOne("SalaryStructure")
                        .HasForeignKey("ProjectPos.Data.EntityModels.SalaryStructure", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Employee");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SalesOrder", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.Company", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SalesOrderItem", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("OrderNumber");

                    b.HasOne("ProjectPos.Data.EntityModels.ProductInventory", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.StockMovement", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.StockMovementLog", "Batch")
                        .WithMany("StockMovements")
                        .HasForeignKey("BatchNumber");

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.ProductInventory", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductInventoryId");

                    b.Navigation("Batch");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.StockMovementLog", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.StockTakeLog", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPos.Data.EntityModels.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.User", b =>
                {
                    b.HasOne("ProjectPos.Data.EntityModels.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("ProjectPos.Data.EntityModels.User", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Account", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.AccountCategory", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Address", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("ContactPerson");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Company", b =>
                {
                    b.Navigation("ContactPersons");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Deductions");

                    b.Navigation("EmployeeDetails");

                    b.Navigation("OvertimeRecords");

                    b.Navigation("PaySlips");

                    b.Navigation("SalaryStructure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.GoodsReceivedVoucher", b =>
                {
                    b.Navigation("PurchaceOrderPayments");

                    b.Navigation("ReceivedItems");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.JournalEntry", b =>
                {
                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PayRollCycle", b =>
                {
                    b.Navigation("PaySlips");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.ProductInventory", b =>
                {
                    b.Navigation("OrderedItems");

                    b.Navigation("ProductPrices");

                    b.Navigation("ReceivedItems");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceInvoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.PurchaceOrder", b =>
                {
                    b.Navigation("GoodsReceivedVouchers");

                    b.Navigation("PurchaceOrderItems");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SalesOrder", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.StockMovementLog", b =>
                {
                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProjectPos.Data.EntityModels.User", b =>
                {
                    b.Navigation("AccessLogs");

                    b.Navigation("CashUps");
                });
#pragma warning restore 612, 618
        }
    }
}
